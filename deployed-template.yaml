trushantdevops@bastion-for-gke templates]$ helm -n onlineboutique get all onlineboutique


NAME: onlineboutique
LAST DEPLOYED: Thu Jul  4 09:08:44 2024
NAMESPACE: onlineboutique
STATUS: deployed
REVISION: 4
CHART: onlineboutique
VERSION: 0.8.0
APP_VERSION: v0.8.0
TEST SUITE: None
USER-SUPPLIED VALUES:
authorizationPolicies:
  create: true
networkPolicies:
  create: true
serviceAccounts:
  create: true
sidecars:
  create: true

COMPUTED VALUES:
adService:
  create: true
  name: adservice
  resources:
    limits:
      cpu: 300m
      memory: 300Mi
    requests:
      cpu: 200m
      memory: 180Mi
authorizationPolicies:
  create: true
cartDatabase:
  connectionString: redis-cart:6379
  externalRedisTlsOrigination:
    certificate: ""
    enable: false
    endpointAddress: ""
    endpointPort: ""
    name: exernal-redis-tls-origination
  inClusterRedis:
    create: true
    name: redis-cart
    publicRepository: true
  type: redis
cartService:
  create: true
  name: cartservice
  resources:
    limits:
      cpu: 300m
      memory: 128Mi
    requests:
      cpu: 200m
      memory: 64Mi
checkoutService:
  create: true
  name: checkoutservice
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
currencyService:
  create: true
  name: currencyservice
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
emailService:
  create: true
  name: emailservice
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
frontend:
  create: true
  cymbalBranding: false
  externalService: true
  name: frontend
  platform: local
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  singleSharedSession: false
  virtualService:
    create: false
    gateway:
      labelKey: asm
      labelValue: ingressgateway
      name: asm-ingressgateway
      namespace: asm-ingress
    hosts:
    - '*'
googleCloudOperations:
  metrics: false
  profiler: false
  tracing: false
images:
  repository: gcr.io/google-samples/microservices-demo
  tag: ""
loadGenerator:
  checkFrontendInitContainer: true
  create: true
  name: loadgenerator
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
networkPolicies:
  create: true
opentelemetryCollector:
  create: false
  name: opentelemetrycollector
  projectId: PROJECT_ID
paymentService:
  create: true
  name: paymentservice
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
productCatalogService:
  create: true
  extraLatency: ""
  name: productcatalogservice
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
recommendationService:
  create: true
  name: recommendationservice
  resources:
    limits:
      cpu: 200m
      memory: 450Mi
    requests:
      cpu: 100m
      memory: 220Mi
seccompProfile:
  enable: false
  type: RuntimeDefault
serviceAccounts:
  annotations: {}
  annotationsOnlyForCartservice: false
  create: true
shippingService:
  create: true
  name: shippingservice
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
sidecars:
  create: true

HOOKS:
MANIFEST:
---
# Source: onlineboutique/templates/adservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: adservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: adservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    ports:
     - port: 9555
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/cartservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cartservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: cartservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    - podSelector:
        matchLabels:
          app: checkoutservice
    ports:
     - port: 7070
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/checkoutservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: checkoutservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: checkoutservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    ports:
     - port: 5050
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/common.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all
  namespace: onlineboutique
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Source: onlineboutique/templates/currencyservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: currencyservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: currencyservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    - podSelector:
        matchLabels:
          app: checkoutservice
    ports:
     - port: 7000
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/emailservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: emailservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: emailservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: checkoutservice
    ports:
     - port: 8080
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/frontend.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - {}
  egress:
  - {}
---
# Source: onlineboutique/templates/loadgenerator.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: loadgenerator
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: loadgenerator
  policyTypes:
  - Egress
  egress:
  - {}
---
# Source: onlineboutique/templates/paymentservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: paymentservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: paymentservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: checkoutservice
    ports:
     - port: 50051
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/productcatalogservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: productcatalogservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: productcatalogservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    - podSelector:
        matchLabels:
          app: checkoutservice
    - podSelector:
        matchLabels:
          app: recommendationservice
    ports:
     - port: 3550
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/recommendationservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: recommendationservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: recommendationservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    ports:
     - port: 8080
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/redis.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-cart
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: redis-cart
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: cartservice
    ports:
     - port: 6379
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/shippingservice.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: shippingservice
  namespace: onlineboutique
spec:
  podSelector:
    matchLabels:
      app: shippingservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    - podSelector:
        matchLabels:
          app: checkoutservice
    ports:
     - port: 50051
       protocol: TCP
  egress:
  - {}
---
# Source: onlineboutique/templates/adservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: adservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/cartservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cartservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/checkoutservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: checkoutservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/currencyservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: currencyservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/emailservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: emailservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/frontend.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend
  namespace: onlineboutique
---
# Source: onlineboutique/templates/loadgenerator.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loadgenerator
  namespace: onlineboutique
---
# Source: onlineboutique/templates/paymentservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: paymentservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/productcatalogservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: productcatalogservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/recommendationservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: recommendationservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/redis.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-cart
  namespace: onlineboutique
---
# Source: onlineboutique/templates/shippingservice.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shippingservice
  namespace: onlineboutique
---
# Source: onlineboutique/templates/adservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: adservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: adservice
  ports:
  - name: grpc
    port: 9555
    targetPort: 9555
---
# Source: onlineboutique/templates/cartservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: cartservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
  - name: grpc
    port: 7070
    targetPort: 7070
---
# Source: onlineboutique/templates/checkoutservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: checkoutservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: checkoutservice
  ports:
  - name: grpc
    port: 5050
    targetPort: 5050
---
# Source: onlineboutique/templates/currencyservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: currencyservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: currencyservice
  ports:
  - name: grpc
    port: 7000
    targetPort: 7000
---
# Source: onlineboutique/templates/emailservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: emailservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: emailservice
  ports:
  - name: grpc
    port: 5000
    targetPort: 8080
---
# Source: onlineboutique/templates/frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
# Source: onlineboutique/templates/frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend-external
  namespace: onlineboutique
spec:
  type: LoadBalancer
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 8080
---
# Source: onlineboutique/templates/paymentservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: paymentservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: paymentservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
# Source: onlineboutique/templates/productcatalogservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: productcatalogservice
  ports:
  - name: grpc
    port: 3550
    targetPort: 3550
---
# Source: onlineboutique/templates/recommendationservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: recommendationservice
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
# Source: onlineboutique/templates/redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-cart
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: redis-cart
  ports:
  - name: tcp-redis
    port: 6379
    targetPort: 6379
---
# Source: onlineboutique/templates/shippingservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: shippingservice
  namespace: onlineboutique
spec:
  type: ClusterIP
  selector:
    app: shippingservice
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
---
# Source: onlineboutique/templates/adservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: adservice
  template:
    metadata:
      labels:
        app: adservice
    spec:
      serviceAccountName: adservice
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
        ports:
        - containerPort: 9555
        env:
        - name: PORT
          value: "9555"
        resources:
          limits:
            cpu: 300m
            memory: 300Mi
          requests:
            cpu: 200m
            memory: 180Mi
        readinessProbe:
          initialDelaySeconds: 20
          periodSeconds: 15
          grpc:
            port: 9555
        livenessProbe:
          initialDelaySeconds: 20
          periodSeconds: 15
          grpc:
            port: 9555
---
# Source: onlineboutique/templates/cartservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: cartservice
  template:
    metadata:
      labels:
        app: cartservice
    spec:
      serviceAccountName: cartservice
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
        ports:
        - containerPort: 7070
        env:
        - name: REDIS_ADDR
          value: "redis-cart:6379"
        resources:
          limits:
            cpu: 300m
            memory: 128Mi
          requests:
            cpu: 200m
            memory: 64Mi
        readinessProbe:
          initialDelaySeconds: 15
          grpc:
            port: 7070
        livenessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          grpc:
            port: 7070
---
# Source: onlineboutique/templates/checkoutservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkoutservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: checkoutservice
  template:
    metadata:
      labels:
        app: checkoutservice
    spec:
      serviceAccountName: checkoutservice
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
        ports:
        - containerPort: 5050
        readinessProbe:
          grpc:
            port: 5050
        livenessProbe:
          grpc:
            port: 5050
        env:
        - name: PORT
          value: "5050"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice:3550"
        - name: SHIPPING_SERVICE_ADDR
          value: "shippingservice:50051"
        - name: PAYMENT_SERVICE_ADDR
          value: "paymentservice:50051"
        - name: EMAIL_SERVICE_ADDR
          value: "emailservice:5000"
        - name: CURRENCY_SERVICE_ADDR
          value: "currencyservice:7000"
        - name: CART_SERVICE_ADDR
          value: "cartservice:7070"
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
# Source: onlineboutique/templates/currencyservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      serviceAccountName: currencyservice
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/currencyservice:v0.8.0
        ports:
        - name: grpc
          containerPort: 7000
        env:
        - name: PORT
          value: "7000"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          grpc:
            port: 7000
        livenessProbe:
          grpc:
            port: 7000
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
# Source: onlineboutique/templates/emailservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: emailservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: emailservice
  template:
    metadata:
      labels:
        app: emailservice
    spec:
      serviceAccountName: emailservice
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          periodSeconds: 5
          grpc:
            port: 8080
        livenessProbe:
          periodSeconds: 5
          grpc:
            port: 8080
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
# Source: onlineboutique/templates/frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: frontend
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
          image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
          ports:
          - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-readiness-probe"
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
              - name: "Cookie"
                value: "shop_session-id=x-liveness-probe"
          env:
          - name: PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: "productcatalogservice:3550"
          - name: CURRENCY_SERVICE_ADDR
            value: "currencyservice:7000"
          - name: CART_SERVICE_ADDR
            value: "cartservice:7070"
          - name: RECOMMENDATION_SERVICE_ADDR
            value: "recommendationservice:8080"
          - name: SHIPPING_SERVICE_ADDR
            value: "shippingservice:50051"
          - name: CHECKOUT_SERVICE_ADDR
            value: "checkoutservice:5050"
          - name: AD_SERVICE_ADDR
            value: "adservice:9555"
          - name: ENV_PLATFORM
            value: "local"
          - name: CYMBAL_BRANDING
            value: "false"
          - name: ENABLE_SINGLE_SHARED_SESSION
            value: "false"
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
---
# Source: onlineboutique/templates/loadgenerator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: loadgenerator
  replicas: 1
  template:
    metadata:
      labels:
        app: loadgenerator
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: loadgenerator
      terminationGracePeriodSeconds: 5
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
      - command:
        - /bin/sh
        - -exc
        - |
          echo "Init container pinging frontend: ${FRONTEND_ADDR}..."
          STATUSCODE=$(wget --server-response http://${FRONTEND_ADDR} 2>&1 | awk '/^  HTTP/{print $2}')
          if test $STATUSCODE -ne 200; then
              echo "Error: Could not reach frontend - Status code: ${STATUSCODE}"
              exit 1
          fi
        name: frontend-check
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: busybox:latest@sha256:3fbc632167424a6d997e74f52b878d7cc478225cffac6bc977eedfe51c7f4e79
        env:
        - name: FRONTEND_ADDR
          value: "frontend:80"
      containers:
      - name: main
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/loadgenerator:v0.8.0
        env:
        - name: FRONTEND_ADDR
          value: "frontend:80"
        - name: USERS
          value: "10"
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 300m
            memory: 256Mi
---
# Source: onlineboutique/templates/paymentservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: paymentservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: paymentservice
  template:
    metadata:
      labels:
        app: paymentservice
    spec:
      serviceAccountName: paymentservice
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          grpc:
            port: 50051
        livenessProbe:
          grpc:
            port: 50051
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
# Source: onlineboutique/templates/productcatalogservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: productcatalogservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: productcatalogservice
  template:
    metadata:
      labels:
        app: productcatalogservice
    spec:
      serviceAccountName: productcatalogservice
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
        ports:
        - containerPort: 3550
        env:
        - name: PORT
          value: "3550"
        - name: DISABLE_PROFILER
          value: "1"
        - name: EXTRA_LATENCY
          value: 
        readinessProbe:
          grpc:
            port: 3550
        livenessProbe:
          grpc:
            port: 3550
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
# Source: onlineboutique/templates/recommendationservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendationservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: recommendationservice
  template:
    metadata:
      labels:
        app: recommendationservice
    spec:
      serviceAccountName: recommendationservice
      terminationGracePeriodSeconds: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
        ports:
        - containerPort: 8080
        readinessProbe:
          periodSeconds: 5
          grpc:
            port: 8080
        livenessProbe:
          periodSeconds: 5
          grpc:
            port: 8080
        env:
        - name: PORT
          value: "8080"
        - name: PRODUCT_CATALOG_SERVICE_ADDR
          value: "productcatalogservice:3550"
        - name: DISABLE_PROFILER
          value: "1"
        resources:
          limits:
            cpu: 200m
            memory: 450Mi
          requests:
            cpu: 100m
            memory: 220Mi
---
# Source: onlineboutique/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cart
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: redis-cart
  template:
    metadata:
      labels:
        app: redis-cart
    spec:
      serviceAccountName: redis-cart
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: redis
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: redis:alpine@sha256:a4c910678a1b358a88446b2fe1c5bb0417a5c9cfac4eba959f1e42d22f2e0af1
        ports:
        - containerPort: 6379
        readinessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        livenessProbe:
          periodSeconds: 5
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
        resources:
          limits:
            memory: 256Mi
            cpu: 125m
          requests:
            cpu: 70m
            memory: 200Mi
      volumes:
      - name: redis-data
        emptyDir: {}
---
# Source: onlineboutique/templates/shippingservice.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shippingservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: shippingservice
  template:
    metadata:
      labels:
        app: shippingservice
    spec:
      serviceAccountName: shippingservice
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
        image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
        ports:
        - containerPort: 50051
        env:
        - name: PORT
          value: "50051"
        - name: DISABLE_PROFILER
          value: "1"
        readinessProbe:
          periodSeconds: 5
          grpc:
            port: 50051
        livenessProbe:
          grpc:
            port: 50051
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
# Source: onlineboutique/templates/adservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: adservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: adservice
  rules:
  - from:
    - source:
        principals:  === {This defines who is allowed to make the request. Here, it restricts access to the service account "frontend" within the "onlineboutique" namespace}
        - cluster.local/ns/onlineboutique/sa/frontend
    to:
    - operation:
        paths:
        - /hipstershop.AdService/GetAds   ==> Access to the path "/hipstershop.AdService/GetAds"
        methods:
        - POST  ==> Only POST method allowed on Port 9555
        ports:
        - "9555"

In simpler terms, this policy allows the "frontend" service account in the "onlineboutique" namespace to call the /hipstershop.AdService/GetAds endpoint 
(presumably to retrieve ads) using the POST method on port 9555 of pods labeled with "app: adservice".

---
# Source: onlineboutique/templates/cartservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: cartservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: cartservice
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/frontend
        - cluster.local/ns/onlineboutique/sa/checkoutservice
    to:
    - operation:
        paths:
        - /hipstershop.CartService/AddItem
        - /hipstershop.CartService/GetCart
        - /hipstershop.CartService/EmptyCart
        methods:
        - POST
        ports:
        - "7070"
---
# Source: onlineboutique/templates/checkoutservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: checkoutservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: checkoutservice
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/frontend
    to:
    - operation:
        paths:
        - /hipstershop.CheckoutService/PlaceOrder
        methods:
        - POST
        ports:
        - "5050"
---
# Source: onlineboutique/templates/common.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-all
  namespace: onlineboutique
spec: {}
---
# Source: onlineboutique/templates/currencyservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: currencyservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: currencyservice
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/frontend
        - cluster.local/ns/onlineboutique/sa/checkoutservice
    to:
    - operation:
        paths:
        - /hipstershop.CurrencyService/Convert
        - /hipstershop.CurrencyService/GetSupportedCurrencies
        methods:
        - POST
        ports:
        - "7000"
---
# Source: onlineboutique/templates/emailservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: emailservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: emailservice
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/checkoutservice
    to:
    - operation:
        paths:
        - /hipstershop.EmailService/SendOrderConfirmation
        methods:
        - POST
        ports:
        - "8080"
---
# Source: onlineboutique/templates/frontend.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: frontend
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: frontend
  rules:
  - to:
    - operation:
        methods:
        - GET
        - POST
        ports:
        - "8080"
---
# Source: onlineboutique/templates/paymentservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: paymentservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: paymentservice
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/checkoutservice
    to:
    - operation:
        paths:
        - /hipstershop.PaymentService/Charge
        methods:
        - POST
        ports:
        - "50051"
---
# Source: onlineboutique/templates/productcatalogservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: productcatalogservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: productcatalogservice
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/frontend
        - cluster.local/ns/onlineboutique/sa/checkoutservice
        - cluster.local/ns/onlineboutique/sa/recommendationservice
    to:
    - operation:
        paths:
        - /hipstershop.ProductCatalogService/GetProduct
        - /hipstershop.ProductCatalogService/ListProducts
        methods:
        - POST
        ports:
        - "3550"
---
# Source: onlineboutique/templates/recommendationservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: recommendationservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: recommendationservice
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/frontend
    to:
    - operation:
        paths:
        - /hipstershop.RecommendationService/ListRecommendations
        methods:
        - POST
        ports:
        - "8080"
---
# Source: onlineboutique/templates/redis.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: redis-cart
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: redis-cart
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/cartservice
    to:
    - operation:
        ports:
        - "6379"
---
# Source: onlineboutique/templates/shippingservice.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: shippingservice
  namespace: onlineboutique
spec:
  selector:
    matchLabels:
      app: shippingservice
  rules:
  - from:
    - source:
        principals:
        - cluster.local/ns/onlineboutique/sa/frontend
        - cluster.local/ns/onlineboutique/sa/checkoutservice
    to:
    - operation:
        paths:
        - /hipstershop.ShippingService/GetQuote
        - /hipstershop.ShippingService/ShipOrder
        methods:
        - POST
        ports:
        - "50051"
---
# Source: onlineboutique/templates/adservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: adservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: adservice
  egress:
  - hosts:
    - istio-system/*
---
# Source: onlineboutique/templates/cartservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: cartservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: cartservice
  egress:
  - hosts:
    - istio-system/*
    - ./redis-cart.onlineboutique.svc.cluster.local
---
# Source: onlineboutique/templates/checkoutservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: checkoutservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: checkoutservice
  egress:
  - hosts:
    - istio-system/*
    - ./cartservice.onlineboutique.svc.cluster.local
    - ./currencyservice.onlineboutique.svc.cluster.local
    - ./emailservice.onlineboutique.svc.cluster.local
    - ./paymentservice.onlineboutique.svc.cluster.local
    - ./productcatalogservice.onlineboutique.svc.cluster.local
    - ./shippingservice.onlineboutique.svc.cluster.local
---
# Source: onlineboutique/templates/currencyservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: currencyservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: currencyservice
  egress:
  - hosts:
    - istio-system/*
---
# Source: onlineboutique/templates/emailservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: emailservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: emailservice
  egress:
  - hosts:
    - istio-system/*
---
# Source: onlineboutique/templates/frontend.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: frontend
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: frontend
  egress:
  - hosts:
    - istio-system/*
    - ./adservice.onlineboutique.svc.cluster.local
    - ./cartservice.onlineboutique.svc.cluster.local
    - ./checkoutservice.onlineboutique.svc.cluster.local
    - ./currencyservice.onlineboutique.svc.cluster.local
    - ./productcatalogservice.onlineboutique.svc.cluster.local
    - ./recommendationservice.onlineboutique.svc.cluster.local
    - ./shippingservice.onlineboutique.svc.cluster.local
---
# Source: onlineboutique/templates/loadgenerator.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: loadgenerator
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: loadgenerator
  egress:
  - hosts:
    - istio-system/*
    - ./frontend.onlineboutique.svc.cluster.local
---
# Source: onlineboutique/templates/paymentservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: paymentservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: paymentservice
  egress:
  - hosts:
    - istio-system/*
---
# Source: onlineboutique/templates/productcatalogservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: productcatalogservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: productcatalogservice
  egress:
  - hosts:
    - istio-system/*
---
# Source: onlineboutique/templates/recommendationservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: recommendationservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: recommendationservice
  egress:
  - hosts:
    - istio-system/*
    - ./productcatalogservice.onlineboutique.svc.cluster.local
---
# Source: onlineboutique/templates/redis.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: redis-cart
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: redis-cart
  egress:
  - hosts:
    - istio-system/*
---
# Source: onlineboutique/templates/shippingservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: shippingservice
  namespace: onlineboutique
spec:
  workloadSelector:
    labels:
      app: shippingservice
  egress:
  - hosts:
    - istio-system/*

NOTES:
Note: It may take a few minutes for the LoadBalancer IP to be available.

Watch the status of the frontend IP address with:
    kubectl get --namespace onlineboutique svc -w frontend-external

Get the external IP address of the frontend:
    export SERVICE_IP=$(kubectl get svc --namespace onlineboutique frontend-external --template "{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
    echo http://$SERVICE_IP